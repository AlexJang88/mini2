<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- CustomAccessDeniedHandler 객체생성 -->	
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<!-- BCryptPasswordEncoder 객체생성 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- CustomUserDetailsService 객체생성 -->
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
	<!-- CustomLoginSuccessHandler 객체생성 -->
	<bean id="customLoginSuccessHandler" class="org.zerock.security.CustomLoginSuccessHandler" />
	
	<security:http>
		
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		<!-- 권한이 없을때 에러처리 -->
		<security:access-denied-handler ref="customAccessDenied" />
		<!-- 로그인페이지(customLogin)설정 , success-handler(customLoginSuccessHandler)설정 -->
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccessHandler"/>
		<!-- 자동로그인 설정 쿠키 604800초 유지 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		<!-- 로그아웃 설정 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID" />
	</security:http>
	<security:authentication-manager>
		<!-- security 기본 설정 테이블이아니라 따로 설정한(customUserDetailsService) 테이블 정보 가져옴 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- security passwordEncoder 사용하여 endcoding된 DB에 패스워드 사용-->
			<security:password-encoder ref="bcryptPasswordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
